/**
 * Embedded normalize.css for css resets.
 */
@import (inline) "normalize/normalize.css";

// max number of columns in a row
@max-row-columns : 12;

/**
 * Clearfix
 */
.clearfix {
  &:before,
  &:after {
    content : " ";
    display : table;
  }
  &:after {
    clear : both;
  }
  *zoom : 1;
}

/**
 * A grid of rows and columns.
 */
.grid {
  & > .row {
    // generate the rows
    .row();
  }
  .clearfix();
}

/**
 * Horizontal rows in a grid. Allows for
 * column count to be defined, up to @max-row-columns.
 */
.grid > .row {
	.clearfix();
}

// mixin for generating rows
.row(@columns : 1) when (@columns <= @max-row-columns) {
  &.row-@{columns} {
    & > .column {
      // generate the columns
      .column(@columns);
    }
  }
	// recurse
  .row(@columns : (@columns + 1));
}

/**
 * Columns in a row. Relative size is calculated
 * based on the number of columns in the row.
 */
.grid > .row > .column {
	overflow-x : hidden;
}

// mixin for generating columns
.column(@columns, @width : 1) when (@width <= @columns) {
  &.column-@{width} {
		.column-fn(@columns, @width);
  }
  &.column-offset-@{width} {
		.column-offset-fn(@columns, @width);
  }
	// recurse
  .column(@columns, @width : (@width + 1));
}

// mixin for sizing
.column-fn(@columns, @width) when (@width <= @columns) {
	float : left;
	width : percentage(@width / @columns); 
}

// mixin for offset
.column-offset-fn(@columns, @width) when (@width < @columns) {
	margin-left : percentage(@width / @columns);
}
