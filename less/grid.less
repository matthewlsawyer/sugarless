/**
 * A grid of rows and columns.
 */
.grid {
  // generate rows
  .row();
  margin-bottom : @margin;
  .clearfix();
}

// Horizontal rows in a grid. Allows for
// column count to be defined, up to @max-row-columns.
.row(@columns : 1) when (@columns <= @max-row-columns) {
  & > .row-@{columns} {
    // generate columns
    .col(@columns, @width : 1);
    // generate offsets
    .col-offset(@columns, @width : 1);
    margin-left : -@column-margin;
	  margin-right : -@column-margin;
    .clearfix();
  }
  // recurse
  .row(@columns : (@columns + 1));
}

// Columns in a row. Relative size is calculated
// based on the number of columns in the row.
.col(@columns, @width) when (@width <= @columns) {
  @percent : percentage(@width / @columns);
  @offset : @column-margin * 2;
  & > .col-@{width} {
    // percentage size minus margin
    width : calc(~'@{percent} - @{offset}');
    width : -o-calc(~'@{percent} - @{offset}');
    width : -moz-calc(~'@{percent} - @{offset}');
    width : -webkit-calc(~'@{percent} - @{offset}');
    float : left;
    overflow-x : hidden;
    margin-left : @column-margin;
    margin-right : @column-margin;
  }
  // recurse
  .col(@columns, @width : (@width + 1));
}

// Column offsets. Adds a left margin to the
// columns which is calculated relative to the
// row size.
.col-offset(@columns, @width) when (@width < @columns) {
  @percent : percentage(@width / @columns);
  & > .col-offset-@{width} {
    // percentage size of the offset column plus normal left margin
    margin-left : calc(~'@{percent} + @{column-margin}');
    margin-left : -o-calc(~'@{percent} + @{column-margin}');
    margin-left : -moz-calc(~'@{percent} + @{column-margin}');
    margin-left : -webkit-calc(~'@{percent} + @{column-margin}');
  }
  // recurse
  .col-offset(@columns, @width : (@width + 1));
}
